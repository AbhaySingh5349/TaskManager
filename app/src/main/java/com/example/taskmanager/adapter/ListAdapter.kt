package com.example.taskmanager.adapter

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.ContextCompat
import androidx.navigation.findNavController
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.RecyclerView
import com.example.taskmanager.R
import com.example.taskmanager.ROOMdatabase.models.PriorityModelClass
import com.example.taskmanager.ROOMdatabase.models.ToDoTable
import com.example.taskmanager.fragments.ToDoListFragmentDirections
import kotlinx.android.synthetic.main.fragment_to_do_list.view.*
import kotlinx.android.synthetic.main.task_layout.view.*

class ListAdapter: RecyclerView.Adapter<ListAdapter.listViewHolder>() {

    var taskList = emptyList<ToDoTable>()

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): listViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.task_layout, parent,false)
        return listViewHolder(view)
    }

    override fun onBindViewHolder(holder: listViewHolder, position: Int) {
        holder.itemView.taskTitleTextView.text = taskList[position].title
        holder.itemView.taskDescriptionTextView.text = taskList[position].description

        val priority = taskList[position].priorityModelClass
        when(priority){
            PriorityModelClass.HIGH -> holder.itemView.priorityIndicatorCardView.setCardBackgroundColor(ContextCompat.getColor(holder.itemView.context,R.color.red))
            PriorityModelClass.MEDIUM -> holder.itemView.priorityIndicatorCardView.setCardBackgroundColor(ContextCompat.getColor(holder.itemView.context,R.color.yellow))
            PriorityModelClass.LOW -> holder.itemView.priorityIndicatorCardView.setCardBackgroundColor(ContextCompat.getColor(holder.itemView.context,R.color.green))
        }

        // auto generated by 'Safe Args' once we add arguments to Update Fragment
        val action = ToDoListFragmentDirections.actionToDoListFragmentToUpdateDataFragment(taskList[position])
        holder.itemView.taskItemCardView.setOnClickListener{
            holder.itemView.findNavController().navigate(action) // update existing item
        }
    }

    fun setData(toDoTable: List<ToDoTable>){
        this.taskList = toDoTable
        notifyDataSetChanged()
    }

    override fun getItemCount(): Int {
        return taskList.size
    }

    class listViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        // item view represents row layout


    }
}